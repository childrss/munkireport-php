#!/usr/bin/python

import os
import subprocess
import sys
import plistlib
import re
import glob
sys.path.insert(0, '/usr/local/munki')

from munkilib import FoundationPlist

def get_daemons():
    
    daemons = ""
            
    # Get Daemons
    for file in os.listdir("/Library/LaunchDaemons"):
        if file.endswith(".plist"):
            daemons = daemons + "/Library/LaunchDaemons/" + file + "\n"
            
    # Get Agents
    for file in os.listdir("/Library/LaunchAgents"):
        if file.endswith(".plist"):
            daemons = daemons + "/Library/LaunchAgents/" + file + "\n"
            
    # Get User Agents
    for file in glob.glob('/Users/*/Library/LaunchAgents/*'):
        if file.endswith(".plist"):
            daemons = daemons + file + "\n"
     
    # Systems ones commented out because we don't need to gather that
    # But they are great for testing with :D
    
    # Get System Agents
    #for file in os.listdir("/System/Library/LaunchAgents"):
    #    if file.endswith(".plist"):
    #        daemons = daemons + "/System/Library/LaunchAgents/" + file + "\n"
            
    # Get System Daemons
    #for file in os.listdir("/System/Library/LaunchDaemons"):
    #    if file.endswith(".plist"):
    #        daemons = daemons + "/System/Library/LaunchDaemons/" + file + "\n"
            
    return daemons[:-1]
    
def process_daemons(daemons):
    
    # man launchd.plist
    
    out = []
    for daemon in daemons.split('\n'):
        pl = FoundationPlist.readPlist(daemon)
        daemonfile ={'label':''}
        for item in pl:
            daemonfile['path'] = daemon
            if item == 'Label':
                daemonfile['label'] = pl[item]
            elif item == 'Disabled':
                daemonfile['disabled'] = to_bool(pl[item])
            elif item == 'UserName':
                daemonfile['username'] = pl[item]
            elif item == 'GroupName':
                daemonfile['groupname'] = pl[item]
            elif item == 'LimitLoadToSessionType':
                if isinstance(pl[item], str):
                    daemonfile['limitloadtosessiontype'] = pl[item]
                else:
                    limitload = ""
                    for hostlimit in pl[item]:
                        limitload = limitload + hostlimit + "\n"
                    daemonfile['limitloadtosessiontype'] = limitload[:-1]
            elif item == 'Program':
                daemonfile['program'] = pl[item]
            elif item == 'EnableGlobbing':
                daemonfile['enableglobbing'] = to_bool(pl[item])
            elif item == 'EnableTransactions':
                daemonfile['enabletransactions'] = to_bool(pl[item])
            elif item == 'OnDemand':
                daemonfile['ondemand'] = to_bool(pl[item])
            elif item == 'RunAtLoad':
                daemonfile['runatload'] = to_bool(pl[item])
            elif item == 'RootDirectory':
                daemonfile['rootdirectory'] = pl[item]
            elif item == 'WorkingDirectory':
                daemonfile['workingdirectory'] = pl[item]
            elif item == 'Umask':
                daemonfile['umask'] = pl[item]
            elif item == 'TimeOut':
                daemonfile['timeout'] = pl[item]
            elif item == 'ExitTimeOut':
                daemonfile['exittimeout'] = pl[item]
            elif item == 'ThrottleInterval':
                daemonfile['throttleinterval'] = pl[item]
            elif item == 'InitGroups':
                daemonfile['initgroups'] = pl[item]
            elif item == 'StartOnMount':
                daemonfile['startonmount'] = to_bool(pl[item])
            elif item == 'StartInterval':
                daemonfile['startinterval'] = pl[item]
            elif item == 'StandardInPath':
                daemonfile['standardinpath'] = pl[item]
            elif item == 'StandardOutPath':
                daemonfile['standardoutpath'] = pl[item]
            elif item == 'StandardErrorPath':
                daemonfile['standarderrorpath'] = pl[item]
            elif item == 'Debug':
                daemonfile['debug'] = to_bool(pl[item])
            elif item == 'WaitForDebugger':
                daemonfile['waitfordebugger'] = to_bool(pl[item])
            elif item == 'Nice':
                daemonfile['nice'] = pl[item]
            elif item == 'ProcessType':
                daemonfile['processtype'] = pl[item]
            elif item == 'AbandonProcessGroup':
                daemonfile['abandonprocessgroup'] = to_bool(pl[item])
            elif item == 'LowPriorityIO':
                daemonfile['lowpriorityio'] = to_bool(pl[item])
            elif item == 'LowPriorityBackgroundIO':
                daemonfile['lowprioritybackgroundio'] = to_bool(pl[item])
            elif item == 'EnablePressuredExit':
                daemonfile['enablepressuredexit'] = to_bool(pl[item])
            elif item == 'LaunchOnlyOnce':
                daemonfile['launchonlyonce'] = to_bool(pl[item])
            elif item == 'inetdCompatibility':
                daemonfile['inetdcompatibility'] = to_bool(pl['inetdCompatibility']['Wait'])
            elif item == 'SessionCreate':
                daemonfile['sessioncreate'] = to_bool(pl[item])
            elif item == 'LegacyTimers':
                daemonfile['legacytimers'] = to_bool(pl[item])
            elif item == 'LimitLoadToHosts':
                limitload = ""
                for hostlimit in pl[item]:
                    limitload = limitload + hostlimit + "\n"
                daemonfile['limitloadtohosts'] = limitload[:-1]
            elif item == 'LimitLoadFromHosts':
                limitload = ""
                for hostlimit in pl[item]:
                    limitload = limitload + hostlimit + "\n"
                daemonfile['limitloadfromhosts'] = limitload[:-1]
            elif item == 'ProgramArguments':
                arguments = ""
                for argstring in pl[item]:
                    arguments = arguments + argstring + " "
                daemonfile['programarguments'] = arguments[:-1]
            elif item == 'WatchPaths':
                paths = ""
                for watch in pl[item]:
                    paths = paths + watch + "\n"
                daemonfile['watchpaths'] = paths[:-1]
            elif item == 'QueueDirectories':
                paths = ""
                for queue in pl[item]:
                    paths = paths + queue + "\n"
                daemonfile['queuedirectories'] = paths[:-1]
            elif item == 'KeepAlive':
                if isinstance(pl[item], bool):
                    daemonfile['keepalive'] = to_bool(pl[item])
                else:
                    for alive in pl[item]:
                        if alive == 'NetworkState':
                            daemonfile['networkstate'] = to_bool(pl[item]['NetworkState'])
                        elif alive == 'SuccessfulExit':
                            daemonfile['successfulexit'] = to_bool(pl[item]['SuccessfulExit'])
                        elif alive == 'PathState':
                            states = ""
                            for pathstate in pl[item]['PathState']:
                                states = states + pathstate + ' ' + to_bool_str(pl[item]['PathState'][pathstate]) + '\n'
                            daemonfile['pathstate'] = states[:-1]
                        elif alive == 'OtherJobEnabled':
                            jobs = ""
                            for otherjob in pl[item]['OtherJobEnabled']:
                                jobs = jobs + otherjob + ' ' + to_bool_str(pl[item]['OtherJobEnabled'][otherjob]) + '\n'
                            daemonfile['otherjobenabled'] = jobs[:-1]
            elif item == 'EnvironmentVariables':
                envvars = ""
                for envvar in pl[item]:
                    envvars = envvars + envvar + ' - ' + pl[item][envvar] + '\n'
                daemonfile['environmentvariables'] = envvars[:-1]
            elif item == 'StartCalendarInterval':
                for calendar in pl[item]:
                    if calendar == 'Minute':
                        daemonfile['startcalendarminute'] = pl[item]['Minute']
                    elif calendar == 'Hour':
                        daemonfile['startcalendarhour'] = pl[item]['Hour']
                    elif calendar == 'Day':
                        daemonfile['startcalendarday'] = pl[item]['Day']
                    elif calendar == 'Weekday':
                        daemonfile['startcalendarweekday'] = pl[item]['Weekday']
                    elif calendar == 'Month':
                        daemonfile['startcalendarmonth'] = pl[item]['Month']
            elif item == 'SoftResourceLimits':
                for resource in pl[item]:
                    if resource == 'Core':
                        daemonfile['softresourcelimitscore'] = pl[item]['Core']
                    elif resource == 'CPU':
                        daemonfile['softresourcelimitscpu'] = pl[item]['CPU']
                    elif resource == 'Data':
                        daemonfile['softresourcelimitsdata'] = pl[item]['Data']
                    elif resource == 'FileSize':
                        daemonfile['softresourcelimitsfilesize'] = pl[item]['FileSize']
                    elif resource == 'MemoryLock':
                        daemonfile['softresourcelimitsmemorylock'] = pl[item]['MemoryLock']
                    elif resource == 'NumberOfFiles':
                        daemonfile['softresourcelimitsnumberoffiles'] = pl[item]['NumberOfFiles']
                    elif resource == 'NumberOfProcesses':
                        daemonfile['softresourcelimitsnumberofprocesses'] = pl[item]['NumberOfProcesses']
                    elif resource == 'ResidentSetSize':
                        daemonfile['softresourcelimitsresidentsetsize'] = pl[item]['ResidentSetSize']
                    elif resource == 'Stack':
                        daemonfile['softresourcelimitsstack'] = pl[item]['Stack']
            elif item == 'HardResourceLimits':
                for resource in pl[item]:
                    if resource == 'Core':
                        daemonfile['hardresourcelimitscore'] = pl[item]['Core']
                    elif resource == 'CPU':
                        daemonfile['hardresourcelimitscpu'] = pl[item]['CPU']
                    elif resource == 'Data':
                        daemonfile['hardresourcelimitsdata'] = pl[item]['Data']
                    elif resource == 'FileSize':
                        daemonfile['hardresourcelimitsfilesize'] = pl[item]['FileSize']
                    elif resource == 'MemoryLock':
                        daemonfile['hardresourcelimitsmemorylock'] = pl[item]['MemoryLock']
                    elif resource == 'NumberOfFiles':
                        daemonfile['hardresourcelimitsnumberoffiles'] = pl[item]['NumberOfFiles']
                    elif resource == 'NumberOfProcesses':
                        daemonfile['hardresourcelimitsnumberofprocesses'] = pl[item]['NumberOfProcesses']
                    elif resource == 'ResidentSetSize':
                        daemonfile['hardresourcelimitsresidentsetsize'] = pl[item]['ResidentSetSize']
                    elif resource == 'Stack':
                        daemonfile['hardresourcelimitsstack'] = pl[item]['Stack']
            elif item == 'MachServices': 
                services = ""
                for service in pl[item]:
                    services = services + service + ' - ' + to_bool_str(pl[item][service]) + '\n'
                daemonfile['machservices'] = services[:-1]                  
            elif item == 'LimitLoadToHardware':
                hardware = ""
                for load in pl[item]['model']:
                    hardware = hardware + load + '\n'
                daemonfile['limitloadtohardware'] = hardware[:-1]
                                
        out.append(daemonfile)
    return out

def to_bool(s):
    if s == True:
        return 1
    else:
        return 0
    
def to_bool_str(s):
    if s == True:
        return "True"
    else:
        return "False"

def main():
    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Skip manual check
    if len(sys.argv) > 1:
        if sys.argv[1] == 'manualcheck':
            print 'Manual check: skipping'
            exit(0)

    # Get information about the launchdaemons/agents
    daemons = get_daemons()
    result=process_daemons(daemons)
    
    # Write launch daemons results to cache
    output_plist = os.path.join(cachedir, 'launchdaemons.plist')
    plistlib.writePlist(result, output_plist)
    #print plistlib.writePlistToString(result)

if __name__ == "__main__":
    main()
